# all available settings of specific linters
linters-settings:
  govet:
    # report about shadowed variables
    check-shadowing: true
    # # settings per analyzer
    # settings:
    #   printf: # analyzer name, run `go tool vet help` to see all analyzers
    #     funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
    #       - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
    #       - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
    #       - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
    #       - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
    # # # enable or disable analyzers by name
    # # enable:
    # #   - atomicalign
    enable-all: true
    # Enable error shadowing as this is useful
    # disable:
    #   - shadow
    disable-all: false
  golint:
    # minimal confidence for issues, default is 0.8
    # min-confidence: 0.8
    # At `min-confidence: 0.7` silly `error strings should not be capitalized or end with punctuation or a newline (golint)` go away.
    min-confidence: 0.1
    auto-fix: true
  errcheck:
    # report about not checking of errors in type assetions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: true
    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: true
  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true
  goimports:
    # put imports beginning with prefix after 3rd-party packages;
    # it's a comma-separated list of prefixes
    local-prefixes: github.com/banaio/golang/project_template
    fast: false
    auto-fix: true
  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 10
  maligned:
    # print struct with more effective memory layout or not, false by default
    suggest-new: true
  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 100
  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 3
  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: UK
    # locale: US
  unused:
    # treat code as a program (not a library) and report unused exported identifiers; default is false.
    # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find funcs usages. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
    auto-fix: true
  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: true # Report preallocation suggestions on for loops, false by default
  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 180
  nolintlint:
    # don't require machine-readable nolint directives (i.e. with no leading space)
    allow-leading-space: true
    # report any unused nolint directives
    allow-unused: false
    # allow-unused: true
    # Ensures that `//nolint` comments include an explanation
    # don't require an explanation for nolint directives
    require-explanation: false
    # don't require nolint directives to be specific about which linter is being skipped
    require-specific: true
    # require-specific: false
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - dupImport # https://github.com/go-critic/go-critic/issues/845
      - ifElseChain
      - octalLiteral
      - wrapperFunc
      # Causing errors in tests.
      - importShadow
      # Ensures that `//nolint` comments include an explanation
      - whyNoLint
  gci:
    local-prefixes: github.com/banaio/golang/project_template
  gofumpt:
    # Choose whether or not to use the extra rules that are disabled
    # by default
    extra-rules: true
  whitespace:
    # Enforces newlines (or comments) after every multi-line if statement
    multi-if: true
    # Enforces newlines (or comments) after every multi-line function signature
    multi-func: true
  gomnd:
    settings:
      mnd:
        # the list of enabled checks, see https://github.com/tommy-muehle/go-mnd/#checks for description.
        # checks: argument,case,condition,operation,return,assign
        checks: argument,assign,case,condition,operation,return
  godot:
    # check all top-level comments, not only declarations
    check-all: true
  godox:
    # report any comments starting with keywords, this is useful for TODO or FIXME comments that
    # might be left in the code accidentally and should be resolved before merging
    keywords: # default keywords are TODO, BUG, and FIXME, these can be overwritten by this setting
      - TODO
      - FIXME
      - NOTE
      - OPTIMIZE # marks code that should be optimized before merging
      - HACK # marks hack-arounds that should be removed before merging
  dogsled:
    # checks assignments with too many blank identifiers; default is 2
    # is 5 too much???
    max-blank-identifiers: 5
  # Whitespace Linter - Forces you to use empty lines!
  # wsl:
  #   auto-fix: true
  #   # If true append is only allowed to be cuddled if appending value is
  #   # matching variables, fields or types on line above. Default is true.
  #   strict-append: true
  #   # Allow calls and assignments to be cuddled as long as the lines have any
  #   # matching variables, fields or types. Default is true.
  #   allow-assign-and-call: true
  #   # Allow multiline assignments to be cuddled. Default is true.
  #   allow-multiline-assign: true
  #   # Allow declarations (var) to be cuddled.
  #   allow-cuddle-declarations: false
  #   # Allow trailing comments in ending of blocks
  #   allow-trailing-comment: false
  #   # Force newlines in end of case at this limit (0 = never).
  #   force-case-trailing-whitespace: 0
  #   # Force cuddling of err checks with err var assignment
  #   force-err-cuddling: false
  #   # Allow leading comments to be separated with empty liens
  #   allow-separated-leading-comment: false
  #   # Controls if you may end case statements with a whitespace.
  #   # This option is independent of other blocks and was introduced to improve readability for complex blocks.
  #   # Default value: false
  #   allow-case-trailing-whitespace: true
  #   # Enforces that an if statement checking an error variable is cuddled with the line that assigned that error variable.
  #   # Default value: false
  #   enforce-err-cuddling: true
  #   # Controls if you may cuddle assignments and anything without needing an empty line between them.
  #   # Default value: false
  #   allow-assign-and-anything: true

issues:
  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-per-linter: 0
  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0
  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: true
  # The default value is false. If set to true exclude and exclude-rules
  # regular expressions become case sensitive.
  exclude-case-sensitive: false
  # List of regexps of issue texts to exclude, empty list by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  #
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # # Exclude some linters from running on tests files.
    # - path: _test\.go
    #   linters:
    #     - gocyclo
    #     - errcheck
    #     - dupl
    #     - gosec
    # # Exclude known linters from partially hard-vendored code,
    # # which is impossible to exclude via "nolint" comments.
    # - path: internal/hmac/
    #   text: 'weak cryptographic primitive'
    #   linters:
    #     - gosec
    # # Exclude some staticcheck messages
    # - linters:
    #     - staticcheck
    #   text: 'SA9003:'
    # # Exclude lll issues for long lines with go:generate
    # - linters:
    #     - lll
    #   source: '^//go:generate '
    # Exclude annoying `golint  error strings should not be capitalized or end with punctuation or a newline` lint warnings/errors.
    - linters:
        - golint
      text: 'error strings should not be capitalized or end with punctuation or a newline'
    # Exclude certain linters in test cases.
    # Exclude annoying `testpackage  package should be `cli_test` instead of `cli`` lint warnings/errors.
    - linters:
        - testpackage
      path: _test\.go
      text: 'package should be `.*_test` instead of `.*`'
    # Exclude annoying `dogsled  declaration has 3 blank identifiers` lint warnings/errors.
    - linters:
        - dogsled
      path: _test\.go
      text: 'declaration has * blank identifiers'
    # Function 'Test_Sitemap_WriteTo_Sample4' is too long (62 > 60) (funlen)go-lint // nolint:gocritic.
    - linters:
        - funlen
      path: _test\.go
      text: "Function '.*' is too long (.* > .*)"
    # commentedOutCode: may want to remove commented-out code (gocritic)go-lint. //nolint:funlen
    - linters:
        - gocritic
      path: _test\.go
      text: 'may want to remove commented-out code'
    # func `logExpectedAndActualXMLFile` is unused (unused)
    - linters:
        - unused
      path: _test\.go
      text: 'func `.*` is unused'
    # line is 151 characters (lll) // go-lint
    - linters:
        - lll
      path: _test\.go
      text: 'line is .* characters.*'
    # Disable these lint warnings - they are annoying
    # err113: do not define dynamic errors, use wrapped static errors instead: ...
    - linters:
        - goerr113
      text: '.*do not define dynamic errors, use wrapped static errors instead.*'
    # Disable these errors
    # should rewrite http.NewRequestWithContext or add (*Request).WithContext (noctx)
    - linters:
        - noctx
      text: '.*should rewrite http\.NewRequestWithContext or add \(\*Request\)\.WithContext.*'

severity:
  # Default value is empty string.
  # Set the default severity for issues. If severity rules are defined and the issues
  # do not match or no severity is provided to the rule this will be the default
  # severity applied. Severities should match the supported severity names of the
  # selected out format.
  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  # -   Checkstyle: https://checkstyle.sourceforge.io/property_types.html#severity
  # -       Github: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  default-severity: error
  # The default value is false.
  # If set to true severity-rules regular expressions become case sensitive.
  case-sensitive: false
  # Default value is empty list.
  # When a list of severity rules are provided, severity information will be added to lint
  # issues. Severity rules have the same filtering capability as exclude rules except you
  # are allowed to specify one matcher per severity rule.
  # Only affects out formats that support setting severity information.
  rules:
    - linters:
        - dupl
      severity: info

linters:
  enable-all: true
  disable-all: false
  # Run only fast linters from enabled linters set (first run won't be fast)
  fast: false
  disable:
    - wsl
    # - lll

run:
  # default concurrency is a available CPU number
  # 16 cores with 32 threads = 32 or 16?
  concurrency: 16
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  deadline: 30s
  # include test files or not, default is true
  tests: true
  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  modules-download-mode: readonly
  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  # allow-parallel-runners: false
  allow-parallel-runners: true
  # Regexps of files to skip
  skip-files:
    - "\\.ignore/.*\\.go"
    # - lib/bad.go
  skip-dirs:
    - '\\.ignore/'
    # - test/testdata_etc
    # - internal/cache
    # - internal/renameio
    # - internal/robustio
  # exit code when at least one issue was found, default is 1
  issues-exit-code: 0

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle, default is "colored-line-number"
  # format: colored-line-number
  format: tab
  # print lines of code with issue, default is true
  # print-issued-lines: true
  print-issued-lines: true
  # print linter name in the end of issue text, default is true
  print-linter-name: true
  # make issues output unique by line, default is true
  uniq-by-line: true
  # Sort linter results
  sort-results: true
  # Print avg and max memory usage of golangci-lint and total time
  print-resources-usage: true
