{
  "swagger_path": "specifications/read-write/v4.0/account-info-swagger.yaml",
  "endpoints": [
    {
      "conditionalProperties": [
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message",
        "Code"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/direct-debits",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/direct-debits",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Data.DirectDebit[*].DirectDebitStatusCode",
        "Data.DirectDebit[*].PreviousPaymentDateTime",
        "Data.DirectDebit[*].DirectDebitId",
        "Links.First",
        "Links.Last",
        "Links.Next",
        "Links.Prev",
        "Meta.FirstAvailableDateTime",
        "Meta.LastAvailableDateTime",
        "Meta.TotalPages"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/direct-debits",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/direct-debits",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Message",
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/balances",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Links.Next",
        "Links.Prev",
        "Links.First",
        "Links.Last",
        "Meta.FirstAvailableDateTime",
        "Meta.LastAvailableDateTime",
        "Meta.TotalPages"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/balances",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/balances",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/balances",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message",
        "Code"
      ],
      "method": "GET",
      "path": "/transactions",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/transactions",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Message",
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id"
      ],
      "method": "GET",
      "path": "/transactions",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Data.Transaction[*].CreditorAccount.Identification",
        "Data.Transaction[*].CreditorAccount.Name",
        "Data.Transaction[*].CreditorAccount.SchemeName",
        "Data.Transaction[*].CreditorAccount.SecondaryIdentification",
        "Data.Transaction[*].DebtorAgent.Identification",
        "Data.Transaction[*].DebtorAgent.Name",
        "Data.Transaction[*].DebtorAgent.PostalAddress.AddressType",
        "Data.Transaction[*].DebtorAgent.PostalAddress.BuildingNumber",
        "Data.Transaction[*].DebtorAgent.PostalAddress.Country",
        "Data.Transaction[*].DebtorAgent.PostalAddress.CountrySubDivision",
        "Data.Transaction[*].DebtorAgent.PostalAddress.Department",
        "Data.Transaction[*].DebtorAgent.PostalAddress.PostCode",
        "Data.Transaction[*].DebtorAgent.PostalAddress.StreetName",
        "Data.Transaction[*].DebtorAgent.PostalAddress.SubDepartment",
        "Data.Transaction[*].DebtorAgent.PostalAddress.TownName",
        "Data.Transaction[*].DebtorAgent.SchemeName",
        "Data.Transaction[*].TransactionId",
        "Data.Transaction[*].ValueDateTime",
        "Data.Transaction[*].CreditorAgent.SchemeName",
        "Data.Transaction[*].CreditorAgent.Identification",
        "Data.Transaction[*].CreditorAgent.Name",
        "Data.Transaction[*].CreditorAgent.PostalAddress.StreetName",
        "Data.Transaction[*].CreditorAgent.PostalAddress.PostCode",
        "Data.Transaction[*].CreditorAgent.PostalAddress.AddressType",
        "Data.Transaction[*].CreditorAgent.PostalAddress.BuildingNumber",
        "Data.Transaction[*].CreditorAgent.PostalAddress.Country",
        "Data.Transaction[*].CreditorAgent.PostalAddress.CountrySubDivision",
        "Data.Transaction[*].CreditorAgent.PostalAddress.Department",
        "Data.Transaction[*].CreditorAgent.PostalAddress.SubDepartment",
        "Data.Transaction[*].CreditorAgent.PostalAddress.TownName",
        "Data.Transaction[*].DebtorAccount.Identification",
        "Data.Transaction[*].DebtorAccount.Name",
        "Data.Transaction[*].DebtorAccount.SchemeName",
        "Data.Transaction[*].DebtorAccount.SecondaryIdentification",
        "Data.Transaction[*].TransactionInformation",
        "Data.Transaction[*].SupplementaryData",
        "Data.Transaction[*].CardInstrument.AuthorisationType",
        "Data.Transaction[*].CardInstrument.Identification",
        "Data.Transaction[*].CardInstrument.Name",
        "Data.Transaction[*].ProprietaryBankTransactionCode.Issuer",
        "Data.Transaction[*].AddressLine",
        "Data.Transaction[*].CurrencyExchange.QuotationDate",
        "Data.Transaction[*].CurrencyExchange.TargetCurrency",
        "Data.Transaction[*].CurrencyExchange.UnitCurrency",
        "Data.Transaction[*].CurrencyExchange.ContractIdentification",
        "Data.Transaction[*].MerchantDetails.MerchantCategoryCode",
        "Data.Transaction[*].MerchantDetails.MerchantName",
        "Data.Transaction[*].TransactionReference",
        "Links.First",
        "Links.Last",
        "Links.Next",
        "Links.Prev",
        "Meta.FirstAvailableDateTime",
        "Meta.LastAvailableDateTime",
        "Meta.TotalPages"
      ],
      "method": "GET",
      "path": "/transactions",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Meta.TotalPages",
        "Meta.FirstAvailableDateTime",
        "Meta.LastAvailableDateTime",
        "Risk",
        "Data.ExpirationDateTime",
        "Data.TransactionFromDateTime",
        "Data.TransactionToDateTime",
        "Links.First",
        "Links.Last",
        "Links.Next",
        "Links.Prev"
      ],
      "method": "POST",
      "path": "/account-access-consents",
      "status_code": 201
    },
    {
      "conditionalProperties": [
        "Message",
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id"
      ],
      "method": "POST",
      "path": "/account-access-consents",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "POST",
      "path": "/account-access-consents",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Id",
        "Message",
        "Code",
        "Errors[*].Path",
        "Errors[*].Url"
      ],
      "method": "POST",
      "path": "/account-access-consents",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Id",
        "Message",
        "Code",
        "Errors[*].Url",
        "Errors[*].Path"
      ],
      "method": "GET",
      "path": "/products",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Data.Product[*].MarketingStateId",
        "Data.Product[*].PCA.OtherFeesCharges.FeeChargeCap[*].OtherFeeType[*].Code",
        "Data.Product[*].PCA.OtherFeesCharges.FeeChargeCap[*].CappingPeriod",
        "Data.Product[*].PCA.OtherFeesCharges.FeeChargeCap[*].FeeCapAmount",
        "Data.Product[*].PCA.OtherFeesCharges.FeeChargeCap[*].FeeCapOccurrence",
        "Data.Product[*].PCA.ProductDetails.MonthlyMaximumCharge",
        "Data.Product[*].OtherProductType.OtherFeesCharges[*].FeeChargeCap[*].OtherFeeType[*].Code",
        "Data.Product[*].OtherProductType.OtherFeesCharges[*].FeeChargeCap[*].CappingPeriod",
        "Data.Product[*].OtherProductType.OtherFeesCharges[*].FeeChargeCap[*].FeeCapAmount",
        "Data.Product[*].OtherProductType.OtherFeesCharges[*].FeeChargeCap[*].FeeCapOccurrence",
        "Data.Product[*].OtherProductType.OtherFeesCharges[*].OtherTariffType.Code",
        "Data.Product[*].OtherProductType.OtherFeesCharges[*].TariffName",
        "Data.Product[*].OtherProductType.OtherFeesCharges[*].TariffType",
        "Data.Product[*].OtherProductType.ProductDetails.OtherSegment.Code",
        "Data.Product[*].OtherProductType.ProductDetails.FeeFreeLength",
        "Data.Product[*].OtherProductType.ProductDetails.FeeFreeLengthPeriod",
        "Data.Product[*].OtherProductType.ProductDetails.MonthlyMaximumCharge",
        "Data.Product[*].OtherProductType.Repayment.AmountType",
        "Data.Product[*].OtherProductType.Repayment.RepaymentFeeCharges.RepaymentFeeChargeCap[*].CappingPeriod",
        "Data.Product[*].OtherProductType.Repayment.RepaymentFeeCharges.RepaymentFeeChargeCap[*].FeeCapAmount",
        "Data.Product[*].OtherProductType.Repayment.RepaymentFeeCharges.RepaymentFeeChargeCap[*].FeeCapOccurrence",
        "Data.Product[*].OtherProductType.Repayment.RepaymentFeeCharges.RepaymentFeeChargeCap[*].OtherFeeType[*].Code",
        "Data.Product[*].OtherProductType.Repayment.OtherAmountType.Code",
        "Data.Product[*].OtherProductType.Repayment.OtherRepaymentFrequency.Code",
        "Data.Product[*].OtherProductType.Repayment.OtherRepaymentType.Code",
        "Data.Product[*].OtherProductType.Repayment.RepaymentFrequency",
        "Data.Product[*].OtherProductType.Repayment.RepaymentHoliday[*].MaxHolidayLength",
        "Data.Product[*].OtherProductType.Repayment.RepaymentHoliday[*].MaxHolidayPeriod",
        "Data.Product[*].OtherProductType.Repayment.RepaymentType",
        "Data.Product[*].OtherProductType.SupplementaryData",
        "Data.Product[*].ProductId",
        "Data.Product[*].ProductName",
        "Data.Product[*].SecondaryProductId",
        "Data.Product[*].BCA.OtherFeesCharges[*].FeeChargeCap[*].FeeCapAmount",
        "Data.Product[*].BCA.OtherFeesCharges[*].FeeChargeCap[*].FeeCapOccurrence",
        "Data.Product[*].BCA.OtherFeesCharges[*].FeeChargeCap[*].OtherFeeType[*].Code",
        "Data.Product[*].BCA.OtherFeesCharges[*].FeeChargeCap[*].CappingPeriod",
        "Data.Product[*].BCA.OtherFeesCharges[*].OtherTariffType.Code",
        "Data.Product[*].BCA.OtherFeesCharges[*].TariffName",
        "Data.Product[*].BCA.OtherFeesCharges[*].TariffType",
        "Data.Product[*].BCA.ProductDetails.FeeFreeLength",
        "Data.Product[*].BCA.ProductDetails.FeeFreeLengthPeriod",
        "Links.First",
        "Links.Last",
        "Links.Next",
        "Links.Prev",
        "Meta.FirstAvailableDateTime",
        "Meta.LastAvailableDateTime",
        "Meta.TotalPages"
      ],
      "method": "GET",
      "path": "/products",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Id",
        "Message",
        "Code",
        "Errors[*].Path",
        "Errors[*].Url"
      ],
      "method": "GET",
      "path": "/products",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/products",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/standing-orders",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Id",
        "Message",
        "Code",
        "Errors[*].Path",
        "Errors[*].Url"
      ],
      "method": "GET",
      "path": "/standing-orders",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Data.StandingOrder[*].FinalPaymentDateTime",
        "Data.StandingOrder[*].StandingOrderId",
        "Data.StandingOrder[*].NextPaymentDateTime",
        "Data.StandingOrder[*].Reference",
        "Data.StandingOrder[*].StandingOrderStatusCode",
        "Data.StandingOrder[*].SupplementaryData",
        "Data.StandingOrder[*].CreditorAccount.Name",
        "Data.StandingOrder[*].CreditorAccount.SecondaryIdentification",
        "Data.StandingOrder[*].FirstPaymentDateTime",
        "Links.First",
        "Links.Last",
        "Links.Next",
        "Links.Prev",
        "Meta.LastAvailableDateTime",
        "Meta.TotalPages",
        "Meta.FirstAvailableDateTime"
      ],
      "method": "GET",
      "path": "/standing-orders",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/standing-orders",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Message",
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/statements/{StatementId}",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/statements/{StatementId}",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/statements/{StatementId}",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Meta.FirstAvailableDateTime",
        "Meta.LastAvailableDateTime",
        "Meta.TotalPages",
        "Data.Statement[*].StatementFee[*].Frequency",
        "Data.Statement[*].StatementFee[*].Rate",
        "Data.Statement[*].StatementFee[*].RateType",
        "Data.Statement[*].StatementFee[*].Description",
        "Data.Statement[*].StatementId",
        "Data.Statement[*].StatementInterest[*].Description",
        "Data.Statement[*].StatementInterest[*].Frequency",
        "Data.Statement[*].StatementInterest[*].Rate",
        "Data.Statement[*].StatementInterest[*].RateType",
        "Data.Statement[*].StatementReference",
        "Links.Next",
        "Links.Prev",
        "Links.First",
        "Links.Last"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/statements/{StatementId}",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Id",
        "Message",
        "Code",
        "Errors[*].Path",
        "Errors[*].Url"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/standing-orders",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Meta.FirstAvailableDateTime",
        "Meta.LastAvailableDateTime",
        "Meta.TotalPages",
        "Data.StandingOrder[*].Reference",
        "Data.StandingOrder[*].StandingOrderId",
        "Data.StandingOrder[*].CreditorAccount.Name",
        "Data.StandingOrder[*].CreditorAccount.SecondaryIdentification",
        "Data.StandingOrder[*].SupplementaryData",
        "Data.StandingOrder[*].NextPaymentDateTime",
        "Data.StandingOrder[*].StandingOrderStatusCode",
        "Data.StandingOrder[*].FinalPaymentDateTime",
        "Data.StandingOrder[*].FirstPaymentDateTime",
        "Links.Prev",
        "Links.First",
        "Links.Last",
        "Links.Next"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/standing-orders",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Message",
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/standing-orders",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/standing-orders",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Id",
        "Message",
        "Code",
        "Errors[*].Path",
        "Errors[*].Url"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/statements/{StatementId}/file",
      "status_code": 500
    },
    {
      "conditionalProperties": [],
      "method": "GET",
      "path": "/accounts/{AccountId}/statements/{StatementId}/file",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/statements/{StatementId}/file",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/statements/{StatementId}/file",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/parties",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Data.Party[*].AccountRole",
        "Data.Party[*].BeneficialOwnership",
        "Data.Party[*].LegalStructure",
        "Data.Party[*].Name",
        "Data.Party[*].PartyNumber",
        "Data.Party[*].PartyType",
        "Data.Party[*].Phone",
        "Data.Party[*].Address[*].AddressType",
        "Data.Party[*].Address[*].BuildingNumber",
        "Data.Party[*].Address[*].CountrySubDivision",
        "Data.Party[*].Address[*].PostCode",
        "Data.Party[*].Address[*].StreetName",
        "Data.Party[*].Address[*].TownName",
        "Data.Party[*].EmailAddress",
        "Data.Party[*].FullLegalName",
        "Data.Party[*].Mobile",
        "Links.First",
        "Links.Last",
        "Links.Next",
        "Links.Prev",
        "Meta.FirstAvailableDateTime",
        "Meta.LastAvailableDateTime",
        "Meta.TotalPages"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/parties",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/parties",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Message",
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/parties",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Url",
        "Errors[*].Path",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/scheduled-payments",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Id",
        "Message",
        "Code",
        "Errors[*].Path",
        "Errors[*].Url"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/scheduled-payments",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/scheduled-payments",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Data.ScheduledPayment[*].CreditorAccount.SecondaryIdentification",
        "Data.ScheduledPayment[*].CreditorAccount.Name",
        "Data.ScheduledPayment[*].Reference",
        "Data.ScheduledPayment[*].ScheduledPaymentId",
        "Links.Next",
        "Links.Prev",
        "Links.First",
        "Links.Last",
        "Meta.FirstAvailableDateTime",
        "Meta.LastAvailableDateTime",
        "Meta.TotalPages"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/scheduled-payments",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message",
        "Code"
      ],
      "method": "GET",
      "path": "/balances",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Links.First",
        "Links.Last",
        "Links.Next",
        "Links.Prev",
        "Meta.FirstAvailableDateTime",
        "Meta.LastAvailableDateTime",
        "Meta.TotalPages"
      ],
      "method": "GET",
      "path": "/balances",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Message",
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id"
      ],
      "method": "GET",
      "path": "/balances",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/balances",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/party",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/party",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Data.Party.Mobile",
        "Data.Party.PartyType",
        "Data.Party.Phone",
        "Data.Party.Address[*].PostCode",
        "Data.Party.Address[*].StreetName",
        "Data.Party.Address[*].TownName",
        "Data.Party.Address[*].AddressType",
        "Data.Party.Address[*].BuildingNumber",
        "Data.Party.Address[*].CountrySubDivision",
        "Data.Party.BeneficialOwnership",
        "Data.Party.LegalStructure",
        "Data.Party.Name",
        "Data.Party.PartyNumber",
        "Data.Party.AccountRole",
        "Data.Party.EmailAddress",
        "Data.Party.FullLegalName",
        "Links.Prev",
        "Links.First",
        "Links.Last",
        "Links.Next",
        "Meta.FirstAvailableDateTime",
        "Meta.LastAvailableDateTime",
        "Meta.TotalPages"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/party",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message",
        "Code"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/party",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/beneficiaries",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Data.Beneficiary[*].AccountId",
        "Data.Beneficiary[*].BeneficiaryId",
        "Data.Beneficiary[*].CreditorAccount.Name",
        "Data.Beneficiary[*].CreditorAccount.SecondaryIdentification",
        "Data.Beneficiary[*].CreditorAgent.Identification",
        "Data.Beneficiary[*].CreditorAgent.Name",
        "Data.Beneficiary[*].CreditorAgent.PostalAddress.Country",
        "Data.Beneficiary[*].CreditorAgent.PostalAddress.CountrySubDivision",
        "Data.Beneficiary[*].CreditorAgent.PostalAddress.Department",
        "Data.Beneficiary[*].CreditorAgent.PostalAddress.TownName",
        "Data.Beneficiary[*].CreditorAgent.PostalAddress.BuildingNumber",
        "Data.Beneficiary[*].CreditorAgent.PostalAddress.AddressType",
        "Data.Beneficiary[*].CreditorAgent.PostalAddress.PostCode",
        "Data.Beneficiary[*].CreditorAgent.PostalAddress.StreetName",
        "Data.Beneficiary[*].CreditorAgent.PostalAddress.SubDepartment",
        "Data.Beneficiary[*].CreditorAgent.SchemeName",
        "Data.Beneficiary[*].Reference",
        "Links.First",
        "Links.Last",
        "Links.Next",
        "Links.Prev",
        "Meta.FirstAvailableDateTime",
        "Meta.LastAvailableDateTime",
        "Meta.TotalPages"
      ],
      "method": "GET",
      "path": "/beneficiaries",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message",
        "Code"
      ],
      "method": "GET",
      "path": "/beneficiaries",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/beneficiaries",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Id",
        "Message",
        "Code",
        "Errors[*].Path",
        "Errors[*].Url"
      ],
      "method": "GET",
      "path": "/direct-debits",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Data.DirectDebit[*].DirectDebitId",
        "Data.DirectDebit[*].DirectDebitStatusCode",
        "Data.DirectDebit[*].PreviousPaymentDateTime",
        "Links.First",
        "Links.Last",
        "Links.Next",
        "Links.Prev",
        "Meta.LastAvailableDateTime",
        "Meta.TotalPages",
        "Meta.FirstAvailableDateTime"
      ],
      "method": "GET",
      "path": "/direct-debits",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/direct-debits",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Errors[*].Url",
        "Errors[*].Path",
        "Id",
        "Message",
        "Code"
      ],
      "method": "GET",
      "path": "/direct-debits",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/scheduled-payments",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Links.First",
        "Links.Last",
        "Links.Next",
        "Links.Prev",
        "Meta.FirstAvailableDateTime",
        "Meta.LastAvailableDateTime",
        "Meta.TotalPages",
        "Data.ScheduledPayment[*].Reference",
        "Data.ScheduledPayment[*].ScheduledPaymentId",
        "Data.ScheduledPayment[*].CreditorAccount.Name",
        "Data.ScheduledPayment[*].CreditorAccount.SecondaryIdentification"
      ],
      "method": "GET",
      "path": "/scheduled-payments",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/scheduled-payments",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Message",
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id"
      ],
      "method": "GET",
      "path": "/scheduled-payments",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Data.Account[*].Account[*].SecondaryIdentification",
        "Data.Account[*].Account[*].Name",
        "Data.Account[*].Status",
        "Data.Account[*].Description",
        "Data.Account[*].Nickname",
        "Data.Account[*].StatusUpdateDateTime",
        "Links.Last",
        "Links.Next",
        "Links.Prev",
        "Links.First",
        "Meta.FirstAvailableDateTime",
        "Meta.LastAvailableDateTime",
        "Meta.TotalPages"
      ],
      "method": "GET",
      "path": "/accounts",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Links.First",
        "Links.Last",
        "Links.Next",
        "Links.Prev",
        "Meta.FirstAvailableDateTime",
        "Meta.LastAvailableDateTime",
        "Meta.TotalPages",
        "Data.Transaction[*].CreditorAgent.Identification",
        "Data.Transaction[*].CreditorAgent.Name",
        "Data.Transaction[*].CreditorAgent.PostalAddress.AddressType",
        "Data.Transaction[*].CreditorAgent.PostalAddress.CountrySubDivision",
        "Data.Transaction[*].CreditorAgent.PostalAddress.TownName",
        "Data.Transaction[*].CreditorAgent.PostalAddress.BuildingNumber",
        "Data.Transaction[*].CreditorAgent.PostalAddress.Country",
        "Data.Transaction[*].CreditorAgent.PostalAddress.Department",
        "Data.Transaction[*].CreditorAgent.PostalAddress.PostCode",
        "Data.Transaction[*].CreditorAgent.PostalAddress.StreetName",
        "Data.Transaction[*].CreditorAgent.PostalAddress.SubDepartment",
        "Data.Transaction[*].CreditorAgent.SchemeName",
        "Data.Transaction[*].DebtorAccount.Identification",
        "Data.Transaction[*].DebtorAccount.Name",
        "Data.Transaction[*].DebtorAccount.SchemeName",
        "Data.Transaction[*].DebtorAccount.SecondaryIdentification",
        "Data.Transaction[*].DebtorAgent.Identification",
        "Data.Transaction[*].DebtorAgent.Name",
        "Data.Transaction[*].DebtorAgent.PostalAddress.AddressType",
        "Data.Transaction[*].DebtorAgent.PostalAddress.Country",
        "Data.Transaction[*].DebtorAgent.PostalAddress.CountrySubDivision",
        "Data.Transaction[*].DebtorAgent.PostalAddress.Department",
        "Data.Transaction[*].DebtorAgent.PostalAddress.PostCode",
        "Data.Transaction[*].DebtorAgent.PostalAddress.StreetName",
        "Data.Transaction[*].DebtorAgent.PostalAddress.TownName",
        "Data.Transaction[*].DebtorAgent.PostalAddress.BuildingNumber",
        "Data.Transaction[*].DebtorAgent.PostalAddress.SubDepartment",
        "Data.Transaction[*].DebtorAgent.SchemeName",
        "Data.Transaction[*].ProprietaryBankTransactionCode.Issuer",
        "Data.Transaction[*].CreditorAccount.Identification",
        "Data.Transaction[*].CreditorAccount.Name",
        "Data.Transaction[*].CreditorAccount.SchemeName",
        "Data.Transaction[*].CreditorAccount.SecondaryIdentification",
        "Data.Transaction[*].TransactionInformation",
        "Data.Transaction[*].ValueDateTime",
        "Data.Transaction[*].CardInstrument.Identification",
        "Data.Transaction[*].CardInstrument.Name",
        "Data.Transaction[*].CardInstrument.AuthorisationType",
        "Data.Transaction[*].CurrencyExchange.ContractIdentification",
        "Data.Transaction[*].CurrencyExchange.QuotationDate",
        "Data.Transaction[*].CurrencyExchange.TargetCurrency",
        "Data.Transaction[*].CurrencyExchange.UnitCurrency",
        "Data.Transaction[*].SupplementaryData",
        "Data.Transaction[*].TransactionId",
        "Data.Transaction[*].TransactionReference",
        "Data.Transaction[*].AddressLine",
        "Data.Transaction[*].MerchantDetails.MerchantCategoryCode",
        "Data.Transaction[*].MerchantDetails.MerchantName"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/statements/{StatementId}/transactions",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Id",
        "Message",
        "Code",
        "Errors[*].Path",
        "Errors[*].Url"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/statements/{StatementId}/transactions",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/statements/{StatementId}/transactions",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/statements/{StatementId}/transactions",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message",
        "Code"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/product",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/product",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Data.Product[*].OtherProductType.OtherFeesCharges[*].OtherTariffType.Code",
        "Data.Product[*].OtherProductType.OtherFeesCharges[*].TariffName",
        "Data.Product[*].OtherProductType.OtherFeesCharges[*].TariffType",
        "Data.Product[*].OtherProductType.OtherFeesCharges[*].FeeChargeCap[*].CappingPeriod",
        "Data.Product[*].OtherProductType.OtherFeesCharges[*].FeeChargeCap[*].FeeCapAmount",
        "Data.Product[*].OtherProductType.OtherFeesCharges[*].FeeChargeCap[*].FeeCapOccurrence",
        "Data.Product[*].OtherProductType.OtherFeesCharges[*].FeeChargeCap[*].OtherFeeType[*].Code",
        "Data.Product[*].OtherProductType.ProductDetails.OtherSegment.Code",
        "Data.Product[*].OtherProductType.ProductDetails.FeeFreeLength",
        "Data.Product[*].OtherProductType.ProductDetails.FeeFreeLengthPeriod",
        "Data.Product[*].OtherProductType.ProductDetails.MonthlyMaximumCharge",
        "Data.Product[*].OtherProductType.SupplementaryData",
        "Data.Product[*].OtherProductType.Repayment.OtherRepaymentFrequency.Code",
        "Data.Product[*].OtherProductType.Repayment.OtherRepaymentType.Code",
        "Data.Product[*].OtherProductType.Repayment.RepaymentFrequency",
        "Data.Product[*].OtherProductType.Repayment.RepaymentHoliday[*].MaxHolidayLength",
        "Data.Product[*].OtherProductType.Repayment.RepaymentHoliday[*].MaxHolidayPeriod",
        "Data.Product[*].OtherProductType.Repayment.AmountType",
        "Data.Product[*].OtherProductType.Repayment.OtherAmountType.Code",
        "Data.Product[*].OtherProductType.Repayment.RepaymentFeeCharges.RepaymentFeeChargeCap[*].OtherFeeType[*].Code",
        "Data.Product[*].OtherProductType.Repayment.RepaymentFeeCharges.RepaymentFeeChargeCap[*].CappingPeriod",
        "Data.Product[*].OtherProductType.Repayment.RepaymentFeeCharges.RepaymentFeeChargeCap[*].FeeCapAmount",
        "Data.Product[*].OtherProductType.Repayment.RepaymentFeeCharges.RepaymentFeeChargeCap[*].FeeCapOccurrence",
        "Data.Product[*].OtherProductType.Repayment.RepaymentType",
        "Data.Product[*].PCA.OtherFeesCharges.FeeChargeCap[*].FeeCapOccurrence",
        "Data.Product[*].PCA.OtherFeesCharges.FeeChargeCap[*].OtherFeeType[*].Code",
        "Data.Product[*].PCA.OtherFeesCharges.FeeChargeCap[*].CappingPeriod",
        "Data.Product[*].PCA.OtherFeesCharges.FeeChargeCap[*].FeeCapAmount",
        "Data.Product[*].PCA.ProductDetails.MonthlyMaximumCharge",
        "Data.Product[*].ProductId",
        "Data.Product[*].SecondaryProductId",
        "Data.Product[*].MarketingStateId",
        "Data.Product[*].BCA.ProductDetails.FeeFreeLengthPeriod",
        "Data.Product[*].BCA.ProductDetails.FeeFreeLength",
        "Data.Product[*].BCA.OtherFeesCharges[*].TariffName",
        "Data.Product[*].BCA.OtherFeesCharges[*].TariffType",
        "Data.Product[*].BCA.OtherFeesCharges[*].FeeChargeCap[*].OtherFeeType[*].Code",
        "Data.Product[*].BCA.OtherFeesCharges[*].FeeChargeCap[*].CappingPeriod",
        "Data.Product[*].BCA.OtherFeesCharges[*].FeeChargeCap[*].FeeCapAmount",
        "Data.Product[*].BCA.OtherFeesCharges[*].FeeChargeCap[*].FeeCapOccurrence",
        "Data.Product[*].BCA.OtherFeesCharges[*].OtherTariffType.Code",
        "Data.Product[*].ProductName",
        "Links.First",
        "Links.Last",
        "Links.Next",
        "Links.Prev",
        "Meta.TotalPages",
        "Meta.FirstAvailableDateTime",
        "Meta.LastAvailableDateTime"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/product",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/product",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Data.Statement[*].StatementReference",
        "Data.Statement[*].StatementFee[*].Description",
        "Data.Statement[*].StatementFee[*].Frequency",
        "Data.Statement[*].StatementFee[*].Rate",
        "Data.Statement[*].StatementFee[*].RateType",
        "Data.Statement[*].StatementInterest[*].Description",
        "Data.Statement[*].StatementInterest[*].Frequency",
        "Data.Statement[*].StatementInterest[*].Rate",
        "Data.Statement[*].StatementInterest[*].RateType",
        "Data.Statement[*].StatementId",
        "Links.Next",
        "Links.Prev",
        "Links.First",
        "Links.Last",
        "Meta.FirstAvailableDateTime",
        "Meta.LastAvailableDateTime",
        "Meta.TotalPages"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/statements",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Id",
        "Message",
        "Code",
        "Errors[*].Url",
        "Errors[*].Path"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/statements",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message",
        "Code"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/statements",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/statements",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Url",
        "Errors[*].Path",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/offers",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Data.Offer[*].EndDateTime",
        "Data.Offer[*].OfferId",
        "Data.Offer[*].StartDateTime",
        "Data.Offer[*].OfferType",
        "Data.Offer[*].Rate",
        "Data.Offer[*].Term",
        "Data.Offer[*].URL",
        "Data.Offer[*].Description",
        "Data.Offer[*].Value",
        "Links.First",
        "Links.Last",
        "Links.Next",
        "Links.Prev",
        "Meta.FirstAvailableDateTime",
        "Meta.LastAvailableDateTime",
        "Meta.TotalPages"
      ],
      "method": "GET",
      "path": "/offers",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/offers",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Id",
        "Message",
        "Code",
        "Errors[*].Path",
        "Errors[*].Url"
      ],
      "method": "GET",
      "path": "/offers",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Links.First",
        "Links.Last",
        "Links.Next",
        "Links.Prev",
        "Meta.TotalPages",
        "Meta.FirstAvailableDateTime",
        "Meta.LastAvailableDateTime",
        "Data.Beneficiary[*].AccountId",
        "Data.Beneficiary[*].BeneficiaryId",
        "Data.Beneficiary[*].CreditorAccount.SecondaryIdentification",
        "Data.Beneficiary[*].CreditorAccount.Name",
        "Data.Beneficiary[*].CreditorAgent.Identification",
        "Data.Beneficiary[*].CreditorAgent.Name",
        "Data.Beneficiary[*].CreditorAgent.PostalAddress.BuildingNumber",
        "Data.Beneficiary[*].CreditorAgent.PostalAddress.CountrySubDivision",
        "Data.Beneficiary[*].CreditorAgent.PostalAddress.PostCode",
        "Data.Beneficiary[*].CreditorAgent.PostalAddress.StreetName",
        "Data.Beneficiary[*].CreditorAgent.PostalAddress.TownName",
        "Data.Beneficiary[*].CreditorAgent.PostalAddress.AddressType",
        "Data.Beneficiary[*].CreditorAgent.PostalAddress.Country",
        "Data.Beneficiary[*].CreditorAgent.PostalAddress.Department",
        "Data.Beneficiary[*].CreditorAgent.PostalAddress.SubDepartment",
        "Data.Beneficiary[*].CreditorAgent.SchemeName",
        "Data.Beneficiary[*].Reference"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/beneficiaries",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Url",
        "Errors[*].Path",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/beneficiaries",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Url",
        "Errors[*].Path",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/beneficiaries",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/beneficiaries",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/offers",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Links.Last",
        "Links.Next",
        "Links.Prev",
        "Links.First",
        "Meta.FirstAvailableDateTime",
        "Meta.LastAvailableDateTime",
        "Meta.TotalPages",
        "Data.Offer[*].EndDateTime",
        "Data.Offer[*].OfferId",
        "Data.Offer[*].Rate",
        "Data.Offer[*].StartDateTime",
        "Data.Offer[*].URL",
        "Data.Offer[*].Value",
        "Data.Offer[*].Description",
        "Data.Offer[*].OfferType",
        "Data.Offer[*].Term"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/offers",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Message",
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/offers",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/offers",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Url",
        "Errors[*].Path",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/statements",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/statements",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/statements",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Data.Statement[*].StatementReference",
        "Data.Statement[*].StatementFee[*].Description",
        "Data.Statement[*].StatementFee[*].Frequency",
        "Data.Statement[*].StatementFee[*].Rate",
        "Data.Statement[*].StatementFee[*].RateType",
        "Data.Statement[*].StatementInterest[*].Description",
        "Data.Statement[*].StatementInterest[*].Frequency",
        "Data.Statement[*].StatementInterest[*].Rate",
        "Data.Statement[*].StatementInterest[*].RateType",
        "Data.Statement[*].StatementId",
        "Links.Next",
        "Links.Prev",
        "Links.First",
        "Links.Last",
        "Meta.FirstAvailableDateTime",
        "Meta.LastAvailableDateTime",
        "Meta.TotalPages"
      ],
      "method": "GET",
      "path": "/statements",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Url",
        "Errors[*].Path",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Data.Account[*].Description",
        "Data.Account[*].Nickname",
        "Data.Account[*].StatusUpdateDateTime",
        "Data.Account[*].Account[*].SecondaryIdentification",
        "Data.Account[*].Account[*].Name",
        "Data.Account[*].Status",
        "Links.First",
        "Links.Last",
        "Links.Next",
        "Links.Prev",
        "Meta.FirstAvailableDateTime",
        "Meta.LastAvailableDateTime",
        "Meta.TotalPages"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/party",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Data.Party.FullLegalName",
        "Data.Party.Name",
        "Data.Party.PartyType",
        "Data.Party.Phone",
        "Data.Party.BeneficialOwnership",
        "Data.Party.EmailAddress",
        "Data.Party.LegalStructure",
        "Data.Party.Mobile",
        "Data.Party.PartyNumber",
        "Data.Party.AccountRole",
        "Data.Party.Address[*].PostCode",
        "Data.Party.Address[*].StreetName",
        "Data.Party.Address[*].TownName",
        "Data.Party.Address[*].AddressType",
        "Data.Party.Address[*].BuildingNumber",
        "Data.Party.Address[*].CountrySubDivision",
        "Links.First",
        "Links.Last",
        "Links.Next",
        "Links.Prev",
        "Meta.LastAvailableDateTime",
        "Meta.TotalPages",
        "Meta.FirstAvailableDateTime"
      ],
      "method": "GET",
      "path": "/party",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/party",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/party",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/account-access-consents/{ConsentId}",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/account-access-consents/{ConsentId}",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Id",
        "Message",
        "Code",
        "Errors[*].Path",
        "Errors[*].Url"
      ],
      "method": "GET",
      "path": "/account-access-consents/{ConsentId}",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Links.Next",
        "Links.Prev",
        "Links.First",
        "Links.Last",
        "Meta.FirstAvailableDateTime",
        "Meta.LastAvailableDateTime",
        "Meta.TotalPages",
        "Risk",
        "Data.TransactionFromDateTime",
        "Data.TransactionToDateTime",
        "Data.ExpirationDateTime"
      ],
      "method": "GET",
      "path": "/account-access-consents/{ConsentId}",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "DELETE",
      "path": "/account-access-consents/{ConsentId}",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "DELETE",
      "path": "/account-access-consents/{ConsentId}",
      "status_code": 400
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "DELETE",
      "path": "/account-access-consents/{ConsentId}",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Message",
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/transactions",
      "status_code": 403
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/transactions",
      "status_code": 500
    },
    {
      "conditionalProperties": [
        "Data.Transaction[*].DebtorAgent.SchemeName",
        "Data.Transaction[*].DebtorAgent.Identification",
        "Data.Transaction[*].DebtorAgent.Name",
        "Data.Transaction[*].DebtorAgent.PostalAddress.BuildingNumber",
        "Data.Transaction[*].DebtorAgent.PostalAddress.CountrySubDivision",
        "Data.Transaction[*].DebtorAgent.PostalAddress.StreetName",
        "Data.Transaction[*].DebtorAgent.PostalAddress.TownName",
        "Data.Transaction[*].DebtorAgent.PostalAddress.AddressType",
        "Data.Transaction[*].DebtorAgent.PostalAddress.PostCode",
        "Data.Transaction[*].DebtorAgent.PostalAddress.SubDepartment",
        "Data.Transaction[*].DebtorAgent.PostalAddress.Country",
        "Data.Transaction[*].DebtorAgent.PostalAddress.Department",
        "Data.Transaction[*].TransactionReference",
        "Data.Transaction[*].ValueDateTime",
        "Data.Transaction[*].AddressLine",
        "Data.Transaction[*].TransactionId",
        "Data.Transaction[*].TransactionInformation",
        "Data.Transaction[*].CreditorAccount.Identification",
        "Data.Transaction[*].CreditorAccount.Name",
        "Data.Transaction[*].CreditorAccount.SchemeName",
        "Data.Transaction[*].CreditorAccount.SecondaryIdentification",
        "Data.Transaction[*].CreditorAgent.Name",
        "Data.Transaction[*].CreditorAgent.PostalAddress.BuildingNumber",
        "Data.Transaction[*].CreditorAgent.PostalAddress.CountrySubDivision",
        "Data.Transaction[*].CreditorAgent.PostalAddress.PostCode",
        "Data.Transaction[*].CreditorAgent.PostalAddress.Department",
        "Data.Transaction[*].CreditorAgent.PostalAddress.StreetName",
        "Data.Transaction[*].CreditorAgent.PostalAddress.SubDepartment",
        "Data.Transaction[*].CreditorAgent.PostalAddress.TownName",
        "Data.Transaction[*].CreditorAgent.PostalAddress.AddressType",
        "Data.Transaction[*].CreditorAgent.PostalAddress.Country",
        "Data.Transaction[*].CreditorAgent.SchemeName",
        "Data.Transaction[*].CreditorAgent.Identification",
        "Data.Transaction[*].CurrencyExchange.ContractIdentification",
        "Data.Transaction[*].CurrencyExchange.QuotationDate",
        "Data.Transaction[*].CurrencyExchange.TargetCurrency",
        "Data.Transaction[*].CurrencyExchange.UnitCurrency",
        "Data.Transaction[*].MerchantDetails.MerchantCategoryCode",
        "Data.Transaction[*].MerchantDetails.MerchantName",
        "Data.Transaction[*].SupplementaryData",
        "Data.Transaction[*].CardInstrument.AuthorisationType",
        "Data.Transaction[*].CardInstrument.Identification",
        "Data.Transaction[*].CardInstrument.Name",
        "Data.Transaction[*].DebtorAccount.Identification",
        "Data.Transaction[*].DebtorAccount.Name",
        "Data.Transaction[*].DebtorAccount.SchemeName",
        "Data.Transaction[*].DebtorAccount.SecondaryIdentification",
        "Data.Transaction[*].ProprietaryBankTransactionCode.Issuer",
        "Links.Next",
        "Links.Prev",
        "Links.First",
        "Links.Last",
        "Meta.FirstAvailableDateTime",
        "Meta.LastAvailableDateTime",
        "Meta.TotalPages"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/transactions",
      "status_code": 200
    },
    {
      "conditionalProperties": [
        "Code",
        "Errors[*].Path",
        "Errors[*].Url",
        "Id",
        "Message"
      ],
      "method": "GET",
      "path": "/accounts/{AccountId}/transactions",
      "status_code": 400
    }
  ]
}